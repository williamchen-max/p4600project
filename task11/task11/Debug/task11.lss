
task11.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000146  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000f2  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000146  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000178  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b5  00000000  00000000  000001d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000607  00000000  00000000  0000088d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000274  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001108  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000365  00000000  00000000  0000112c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000064  00000000  00000000  00001491  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014f5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:
int main(void)
{
    uint16_t lowbyte; // unsingn int of 16 bit
    uint16_t highbyte;
	uint16_t finalvalue;
	ADCSRA |= (1<<ADEN);
  80:	ea e7       	ldi	r30, 0x7A	; 122
  82:	f0 e0       	ldi	r31, 0x00	; 0
  84:	80 81       	ld	r24, Z
  86:	80 68       	ori	r24, 0x80	; 128
  88:	80 83       	st	Z, r24


	DDRD |= (1<<PD1); // SET PORT D 1 to 3 AS OUTPUT PIN
  8a:	51 9a       	sbi	0x0a, 1	; 10
	
	DDRD |= (1<<PD2);
  8c:	52 9a       	sbi	0x0a, 2	; 10
	
	DDRD |= (1<<PD3);
  8e:	53 9a       	sbi	0x0a, 3	; 10
	
	ADMUX |= (1<<MUX2)|(1<<MUX0)|(1<<REFS0); // Set ADC05 on
  90:	ec e7       	ldi	r30, 0x7C	; 124
  92:	f0 e0       	ldi	r31, 0x00	; 0
  94:	80 81       	ld	r24, Z
  96:	85 64       	ori	r24, 0x45	; 69
  98:	80 83       	st	Z, r24
	
while(1){
ADCSRA |=(1<<ADSC); // START data collection
  9a:	ea e7       	ldi	r30, 0x7A	; 122
  9c:	f0 e0       	ldi	r31, 0x00	; 0
    while(! ADCSRA & (1<<ADIF)); // LOOP until ADC complete
       
	     lowbyte = ADCL;  
  9e:	c8 e7       	ldi	r28, 0x78	; 120
  a0:	d0 e0       	ldi	r29, 0x00	; 0
		 highbyte = ADCH;  
  a2:	a9 e7       	ldi	r26, 0x79	; 121
  a4:	b0 e0       	ldi	r27, 0x00	; 0
	DDRD |= (1<<PD3);
	
	ADMUX |= (1<<MUX2)|(1<<MUX0)|(1<<REFS0); // Set ADC05 on
	
while(1){
ADCSRA |=(1<<ADSC); // START data collection
  a6:	80 81       	ld	r24, Z
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	80 83       	st	Z, r24
    while(! ADCSRA & (1<<ADIF)); // LOOP until ADC complete
  ac:	80 81       	ld	r24, Z
       
	     lowbyte = ADCL;  
  ae:	88 81       	ld	r24, Y
		 highbyte = ADCH;  
  b0:	2c 91       	ld	r18, X
		 
		 finalvalue = (highbyte << 8)| lowbyte;
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	92 2b       	or	r25, r18

	if(finalvalue < 300)
  b6:	8c 32       	cpi	r24, 0x2C	; 44
  b8:	21 e0       	ldi	r18, 0x01	; 1
  ba:	92 07       	cpc	r25, r18
  bc:	20 f4       	brcc	.+8      	; 0xc6 <main+0x46>
	{
		PORTD &= ~(1 << PD1);
  be:	59 98       	cbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD2);
  c0:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &= ~(1 << PD3);
  c2:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << PD1);
  c4:	59 9a       	sbi	0x0b, 1	; 11
	}
	if(finalvalue < 600 & finalvalue > 300)
  c6:	9c 01       	movw	r18, r24
  c8:	2d 52       	subi	r18, 0x2D	; 45
  ca:	31 40       	sbci	r19, 0x01	; 1
  cc:	2b 32       	cpi	r18, 0x2B	; 43
  ce:	31 40       	sbci	r19, 0x01	; 1
  d0:	20 f4       	brcc	.+8      	; 0xda <main+0x5a>
	{
		PORTD &= ~(1 << PD1);
  d2:	59 98       	cbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD2);
  d4:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &= ~(1 << PD3);		
  d6:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << PD2);
  d8:	5a 9a       	sbi	0x0b, 2	; 11
	}
	if(finalvalue < 900 & finalvalue > 600)
  da:	89 55       	subi	r24, 0x59	; 89
  dc:	92 40       	sbci	r25, 0x02	; 2
  de:	8b 32       	cpi	r24, 0x2B	; 43
  e0:	91 40       	sbci	r25, 0x01	; 1
  e2:	08 f7       	brcc	.-62     	; 0xa6 <main+0x26>
	{
		PORTD &= ~(1 << PD1);
  e4:	59 98       	cbi	0x0b, 1	; 11
		PORTD &= ~(1 << PD2);
  e6:	5a 98       	cbi	0x0b, 2	; 11
		PORTD &= ~(1 << PD3);
  e8:	5b 98       	cbi	0x0b, 3	; 11
		PORTD |= (1 << PD3);
  ea:	5b 9a       	sbi	0x0b, 3	; 11
  ec:	dc cf       	rjmp	.-72     	; 0xa6 <main+0x26>

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
